import keyboard
from time import sleep
import paho.mqtt.client as mqtt
import os
import time
import pygetwindow as gw
from ctypes import windll
from pycaw.pycaw import AudioUtilities, ISimpleAudioVolume
import comtypes

# Конфигурация подключения
BROKER = "192.168.1.109"  # Замените на IP вашего брокера
PORT = 1883           # Порт для подключения
CLIENT_ID = "PC_Client"
USERNAME = "user"  # Укажите ваш логин
PASSWORD = "passwd"   # Укажите ваш пароль


MQTT_DEVICE_ID = "pc_device_001"
SWITCH_SHUTDOWN_ID = "switch_pc_shutdown"
SWITCH_SLEEP_ID = "switch_pc_sleep"
SWITCH_WAKE_UP_ID = "switch_pc_wake_up"
SENSOR_ACTIVE_WINDOW_ID = "sensor_pc_active_window"

# Функции для управления ПК
def shutdown_pc():
    os.system("shutdown /s /t 1")

def sleep_pc():
    os.system("shutdown /h")


def OFF():
    print("!!OFF!!")
    active_window = gw.getActiveWindow()  # Получаем текущее активное окно
    if active_window:
        window_title = active_window.title
        print(f"Текущее активное окно: {window_title}")
        

        if "music.apple.com" in window_title:
            print("Обнаружено окно с music.apple.com")

            keyboard.press("space")
            sleep(0.1)
            keyboard.release("space")
            keyboard.press("F1")
            sleep(1)
            keyboard.release("F1")

        elif "YouTube" in window_title:
            print("Обнаружено окно с YouTube")
            # Ваши действия для окна с YouTube
            keyboard.press("space")
            sleep(0.1)
            keyboard.release("space")
            keyboard.press("F1")
            sleep(1)
            keyboard.release("F1")
        else:

            print("Активное окно не совпадает с условиями.")
    else:
        print("Нет активного окна")
# Callback на успешное подключение
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Успешно подключено к MQTT!")
        client.subscribe("home/pc/commands")  # Подписка на тему команд
    else:
        print(f"Ошибка подключения, код: {rc}")

# Callback на получение сообщений
def on_message(client, userdata, msg):
    command = msg.payload.decode()
    print(f"Получена команда: {command}")
    
    if command == "shutdown":
        shutdown_pc()
    elif command == "sleep":
        sleep_pc()
    elif command == "wake_up":
        wake_up_pc()
    elif command == "OFF":
        OFF()
    else:
        print("Неизвестная команда.")

# Функция для отправки активного окна
def publish_active_window(client):
    while True:
        active_window = gw.getActiveWindow()
        if active_window:
            window_title = active_window.title
            # Проверяем, содержит ли название окна слово "Яндекс"
            if "Яндекс" in window_title:
                window_title = "Яндекс"
            client.publish(f"home/pc/status/{SENSOR_ACTIVE_WINDOW_ID}", window_title)
            print(f"Активное окно: {window_title}")
        else:
            client.publish(f"home/pc/status/{SENSOR_ACTIVE_WINDOW_ID}", "Нет активного окна")
            print("Нет активного окна")
        time.sleep(5)  # Отправлять данные каждые 5 секунд

# Основная логика
def main():
    client = mqtt.Client(CLIENT_ID)
    client.username_pw_set(USERNAME, PASSWORD)  # Установка логина и пароля
    client.on_connect = on_connect
    client.on_message = on_message

    try:
        client.connect(BROKER, PORT, 60)
        client.loop_start()  # Запускаем цикл обработки сообщений
        
        # Запускаем отправку активного окна в отдельном потоке
        publish_active_window(client)

    except KeyboardInterrupt:
        print("Отключение...")
    except Exception as e:
        print(f"Ошибка: {e}")
    finally:
        client.loop_stop()  # Останавливаем цикл
        client.disconnect()  # Отключаемся
if __name__ == "__main__":
    main()